@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime

<div @ref="_focusTrap" @onkeydown="HandleKeyPress" @onkeyup="HandleKeyPress">
    <div tabindex="@_tabIndex" @onfocus="() => SetFocusLocation(CurrentLocation.Top)"></div>
        <div tabindex="-1" @ref="_topInner"></div>
            @ChildContent
        <div tabindex="-1" @ref="_bottomInner"></div>
    <div tabindex="@_tabIndex" @onfocus="() =>  SetFocusLocation(CurrentLocation.Bottom)"></div>
</div>

@code {
    private enum CurrentLocation : int { Top, Bottom }

    private ElementReference _focusTrap { get; set; }
    private ElementReference _topInner;
    private ElementReference _bottomInner;
    private bool             _hasShiftKey;
    private bool             _focusCaptured;

    private IJSObjectReference _focusModule;

    private int _tabIndex = 0;

    [EditorRequired, Parameter] public bool Disabled { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent  { get; set; }

    private void HandleKeyPress(KeyboardEventArgs keyArgs)

        => _hasShiftKey = keyArgs.Key == "Tab" ? keyArgs.ShiftKey : false;

    private async Task SetFocusLocation(CurrentLocation currentLocation)
    {
        if (currentLocation == CurrentLocation.Top     && _hasShiftKey == true) await SetFocus(false);
        if (currentLocation == CurrentLocation.Bottom  &&  _hasShiftKey == false) await SetFocus(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (true == firstRender) _focusModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorBuilds.Components/assets/js/focusTrap.js");

        if (true == firstRender && false == Disabled) await SetCapturedState();

        if (false == firstRender && false == Disabled && false == _focusCaptured) await SetCapturedState();

    }

    private async Task SetCapturedState()
    {
        await SetFocus(true);
        _focusCaptured = true;
    }

    private async Task SetFocus(bool toFirstChild)

        => await _focusModule.InvokeVoidAsync("setChildFocus", _focusTrap, toFirstChild, 1);

    protected override void OnParametersSet()
    {
        _tabIndex = Disabled == false ? 0 : -1;
         if(true == Disabled) _focusCaptured = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_focusModule is not null) await _focusModule.DisposeAsync();
    }
}
