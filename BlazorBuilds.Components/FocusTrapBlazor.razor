
<div @ref="_focusTrap" @onkeydown="HandleKeyPress" @onkeyup="HandleKeyPress">
    <div tabindex="@_tabIndex" @onfocus="() => SetFocusLocation(CurrentLocation.Top)"></div>
        <div tabindex="-1" @ref="_topInner"></div>
            @ChildContent
        <div tabindex="-1" @ref="_bottomInner"></div>
    <div tabindex="@_tabIndex" @onfocus="() =>  SetFocusLocation(CurrentLocation.Bottom)"></div>
</div>

@code {

    private enum CurrentLocation : int { Top, Bottom }

    private ElementReference _focusTrap { get; set; }
    private ElementReference _topInner;
    private ElementReference _bottomInner;

    private IJSObjectReference _focusModule;
    private bool _hasShiftKey;
    private bool _focusCaptured;
    private int  _tabIndex = -1;

    [EditorRequired, Parameter] public bool Disabled { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent  { get; set; }

    private void HandleKeyPress(KeyboardEventArgs keyArgs)

        => _hasShiftKey = keyArgs.Key == "Tab" ? keyArgs.ShiftKey : false;

    private async Task SetFocusLocation(CurrentLocation currentLocation)
    {
        if (true == Disabled) return;
        if (currentLocation == CurrentLocation.Top     && _hasShiftKey == true)  await _bottomInner.FocusAsync();
        if (currentLocation == CurrentLocation.Bottom  && _hasShiftKey == false) await _topInner.FocusAsync();
    }

    protected override void OnParametersSet()
    {
        _tabIndex = Disabled == false ? 0 : -1;
        if (true == Disabled) _focusCaptured = false; ;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true && false == Disabled) await SetCapturedState();

        if (false == firstRender && false == Disabled && false == _focusCaptured) await SetCapturedState();
    }

    private async Task SetCapturedState()
    {
        await _topInner.FocusAsync();
        _focusCaptured = true;
    }

}
